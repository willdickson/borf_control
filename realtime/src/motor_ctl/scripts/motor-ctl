#!/usr/bin/env bash
#
# motor-ctl - script used to load the hard real-time motor driver
# into the kernel. 
#
# Will Dickson 03/12/2008
# -----------------------------------------------------------------
udev_sleep=0.25
max_cnt=5
comedi_dev=/dev/comedi0
unamer=$(uname -r)
rtai_dir=/usr/realtime/modules/
daq_card_driver=cb_pcidas


# Wait until udev configure comedi device or we reach max count
function waitfor_comedi_dev {
    cnt=0
    until test -e comedi_dev || [ $cnt = $max_cnt ]
    do
	sleep $udev_sleep
	let cnt=cnt+1
    done
}

# Wait until udev configures rtai devices
function waitfor_rtf0 {
    cnt=0
    until test -e /dev/rtf0 || [ $cnt = $max_cnt ] 
    do
	echo waiting for rtf0 - sleeping
	sleep 0.25
	let cnt=cnt+1
    done
}

# Insert required kernel modules required for rtai and comedi
# and configure device
function start_motor_ctl {    
    echo starting motor_ctl
    insmod ${rtai_dir}rtai_hal.ko 
    insmod ${rtai_dir}rtai_sched.ko 
    insmod ${rtai_dir}rtai_fifos.ko
    insmod ${rtai_dir}rtai_sem.ko
    insmod ${rtai_dir}rtai_mbx.ko
    insmod ${rtai_dir}rtai_msg.ko
    insmod ${rtai_dir}rtai_shm.ko
    insmod ${rtai_dir}rtai_wd.ko
    modprobe comedi
    modprobe kcomedilib
    insmod ${rtai_dir}rtai_comedi.ko
    modprobe ${daq_card_driver}
    waitfor_comedi_dev # Wait for udev device configuration 
    comedi_config $comedi_dev $daq_card_driver 
    waitfor_rtf0
    insmod /usr/local/lib/modules/$unamer/motor_ctl.ko
    echo "done"
}

# Remove required kernel modules for rtai and comedi
function stop_motor_ctl {
    echo stopping motor_ctl
    rmmod motor_ctl
    modprobe -r $daq_card_driver
    rmmod rtai_comedi
    modprobe -r kcomedilib
    modprobe -r comedi
    rmmod rtai_wd
    rmmod rtai_shm
    rmmod rtai_msg
    rmmod rtai_mbx
    rmmod rtai_sem
    rmmod rtai_fifos
    rmmod rtai_sched
    rmmod rtai_hal
    echo "done"
}

# Main --------------------------------------------------
case $1 in

    start) start_motor_ctl;;

    stop) stop_motor_ctl;;

    *) echo uknown command $1; exit 1;;

    esac
exit 0



